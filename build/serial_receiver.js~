var SerialReceiver = function(options) {
    var ros = options.ros;
    var topicName = options.topicName || '/serial_receive_msgs';
    var paramName = options.paramName || 'robot_description';

    var param = new ROSLIB.Param({
        ros : ros,
        name : paramName
    });
  

    var load_model = function(param) {
        var parser = new DOMParser();
        var xmlDoc = parser.parseFromString(param, 'text/xml');
    
        // See https://developer.mozilla.org/docs/XPathResult#Constants
        var XPATH_FIRST_ORDERED_NODE_TYPE = 9;
    
        var robotXml = xmlDoc.evaluate('//robot', xmlDoc, null, XPATH_FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
        var c = 0;
        var container = document.getElementById('serial-receive');
        for (var nodes = robotXml.childNodes, i = 0; i < nodes.length; i++) {
            var node = nodes[i];
            if(node.tagName==='joint' && node.getAttribute('type')!=='fixed'){
                var name = node.getAttribute('name');
                if (new RegExp('[1-9]\.1.+').test(name) || new RegExp('0\.[13].+').test(name)) {
                    var x = document.createElement('div');
                    x.setAttribute('id', name + '-value-received-from-serial');
                    x.innerText = name + ': 0';
                    container.appendChild(x);
                    container.appendChild(document.createElement('br'));
                }
            }
        }
    };

    param.get(load_model);

    var listener_topic = new ROSLIB.Topic({
        ros: ros,
        name: topicName,
        messageType: 'std_msgs/String'
    });

    listener_topic.subscribe(function(message) {
        var jointsValues = parseMessage(message);
        jointsValues.forEach(function(value) {
            try {
                document.getElementById(value.jointName + '-value-received-from-serial').innerText = value.jointName + ': ' + value.jointValue;
            } catch(error) {
                console.log("joint " + value.jointName + " isn't shown up. Ignore...");
            }
        });
    });

    function parseMessage(message) {
        var values = [];
        message.data.split('$').forEach(function(rawValue) {
            var pair = rawValue.split(',');
	    if (pair.length != 2) { return values; }
            var jointNamePair = pair[0].split(':');
            if (jointNamePair.length != 2 || jointNamePair[0].trim() != 'name') { return values; }
            var jointValuePair = pair[1].split(':');
            if (jointValuePair.length != 2 || jointValuePair[0].trim() != 'position') { return values; }
            values.push({jointName: jointNamePair[1].trim(), jointValue: jointValuePair[1].trim()});
        });
        return values;
    }

}
